# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
first_survived <- survival_rate("1st")
class <- Titanic_df[Titanic_df$Class == input_class,]
# Define a function called `survival_rate()` that takes in a ticket class
# (e.g., "1st", "2nd") as an argument.This function should return the following
# sentence that compares the *total survival rate* of adult men vs.
# "women and children" in that ticketing class. It should read (for example):
# "Of Crew class, 87% of women and children survived and 22% of men survived.".
# The approach you take to generating the sentence to return is up to you.
# A good solution will likely utilize filtering to produce the required data.
survival_rate <- function(input_class){
class <- Titanic_df[Titanic_df$Class == input_class,]
men <- class[class$Sex == "Male",]
men_rate <- sum(men[men$Survived == "Yes", "Freq"])/sum(men$Freq) * 100
women_children <- class[class$Sex == "Female"| class$Sex == "Child",]
wc_rate <- sum(women_children[women_children$Survived == "Yes","Freq"])/sum(women_children$Freq) * 100
paste("Of ", input_class," class, ", wc_rate, " % of women and children survived and ",
men_rate, "% of men survived.")
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
first_survived <- survival_rate("1st")
first_survived
# Define a function called `survival_rate()` that takes in a ticket class
# (e.g., "1st", "2nd") as an argument.This function should return the following
# sentence that compares the *total survival rate* of adult men vs.
# "women and children" in that ticketing class. It should read (for example):
# "Of Crew class, 87% of women and children survived and 22% of men survived.".
# The approach you take to generating the sentence to return is up to you.
# A good solution will likely utilize filtering to produce the required data.
survival_rate <- function(input_class){
class <- Titanic_df[Titanic_df$Class == input_class,]
men <- class[class$Sex == "Male",]
men_rate <- round(sum(men[men$Survived == "Yes", "Freq"])/sum(men$Freq) * 100)
women_children <- class[class$Sex == "Female"| class$Sex == "Child",]
wc_rate <- round(sum(women_children[women_children$Survived == "Yes","Freq"])/sum(women_children$Freq) * 100)
paste("Of ", input_class," class, ", wc_rate, " % of women and children survived and ",
men_rate, "% of men survived.")
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
crew_survived <- survival_rate("Crew")
crew_survived
# Define a function called `survival_rate()` that takes in a ticket class
# (e.g., "1st", "2nd") as an argument.This function should return the following
# sentence that compares the *total survival rate* of adult men vs.
# "women and children" in that ticketing class. It should read (for example):
# "Of Crew class, 87% of women and children survived and 22% of men survived.".
# The approach you take to generating the sentence to return is up to you.
# A good solution will likely utilize filtering to produce the required data.
survival_rate <- function(input_class){
class <- Titanic_df[Titanic_df$Class == input_class,]
men <- class[class$Sex == "Male",]
men_rate <- round(sum(men[men$Survived == "Yes", "Freq"])/sum(men$Freq) * 100)
men_string <- paste0(men_rate,"%")
women_children <- class[class$Sex == "Female"| class$Sex == "Child",]
wc_rate <- round(sum(women_children[women_children$Survived == "Yes","Freq"])/sum(women_children$Freq) * 100)
wc_string <- paste0(wc_rate,"%")
paste("Of ", input_class," class, ", wc_string, " of women and children survived and ",
men_string, " of men survived.")
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
crew_survived <- survival_rate("Crew")
crew_survived
# Define a function called `survival_rate()` that takes in a ticket class
# (e.g., "1st", "2nd") as an argument.This function should return the following
# sentence that compares the *total survival rate* of adult men vs.
# "women and children" in that ticketing class. It should read (for example):
# "Of Crew class, 87% of women and children survived and 22% of men survived.".
# The approach you take to generating the sentence to return is up to you.
# A good solution will likely utilize filtering to produce the required data.
survival_rate <- function(input_class){
class <- Titanic_df[Titanic_df$Class == input_class,]
men <- class[class$Sex == "Male",]
men_rate <- round(sum(men[men$Survived == "Yes", "Freq"])/sum(men$Freq) * 100)
men_string <- paste0(men_rate,"%")
women_children <- class[class$Sex == "Female"| class$Sex == "Child",]
wc_rate <- round(sum(women_children[women_children$Survived == "Yes","Freq"])/sum(women_children$Freq) * 100)
wc_string <- paste0(wc_rate,"%")
paste0("Of ", input_class," class, ", wc_rate, "% of women and children survived and ",
men_rate, "% of men survived.")
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
crew_survived <- survival_rate("Crew")
crew_survived
# Define a function called `survival_rate()` that takes in a ticket class
# (e.g., "1st", "2nd") as an argument.This function should return the following
# sentence that compares the *total survival rate* of adult men vs.
# "women and children" in that ticketing class. It should read (for example):
# "Of Crew class, 87% of women and children survived and 22% of men survived.".
# The approach you take to generating the sentence to return is up to you.
# A good solution will likely utilize filtering to produce the required data.
survival_rate <- function(input_class){
class <- Titanic_df[Titanic_df$Class == input_class,]
men <- class[class$Sex == "Male",]
men_rate <- round(sum(men[men$Survived == "Yes", "Freq"])/sum(men$Freq) * 100)
women_children <- class[class$Sex == "Female"| class$Sex == "Child",]
wc_rate <- round(sum(women_children[women_children$Survived == "Yes","Freq"])/sum(women_children$Freq) * 100)
paste0("Of ", input_class," class, ", wc_rate, "% of women and children survived and ",
men_rate, "% of men survived.")
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
first_survived <- survival_rate("1st")
second_survived <- survival_rate("2nd")
third_survived <- survival_rate("3rd")
# Using the `read.csv` function, read the life_expectancy.csv file into
# a variable called `life_expectancy`. Makes sure not to read strings as factors
read.csv("life_expectancy", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life_expectancy.csv file into
# a variable called `life_expectancy`. Makes sure not to read strings as factors
read.csv("life_expectancy.csv", stringsAsFactors = FALSE)
setwd("~/School/INFO201/HW3/a3-using-data-belmontmat")
# Using the `read.csv` function, read the life_expectancy.csv file into
# a variable called `life_expectancy`. Makes sure not to read strings as factors
read.csv("life_expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life_expectancy.csv file into
# a variable called `life_expectancy`. Makes sure not to read strings as factors
life_expectancy <- read.csv("life_expectancy.csv", stringsAsFactors = FALSE)
setwd("~/School/INFO201/HW3/a3-using-data-belmontmat")
# Using the `read.csv` function, read the life_expectancy.csv file into
# a variable called `life_expectancy`. Makes sure not to read strings as factors
life_expectancy <- read.csv("life_expectancy.csv", stringsAsFactors = FALSE)
setwd("~/School/INFO201/HW3/a3-using-data-belmontmat")
setwd("~/School/INFO201/HW3/a3-using-data-belmontmat/data")
# Using the `read.csv` function, read the life_expectancy.csv file into
# a variable called `life_expectancy`. Makes sure not to read strings as factors
life_expectancy <- read.csv("life_expectancy.csv", stringsAsFactors = FALSE)
# Determine if `life_expectancy` is a data.frame by using
# the is.data.frame function. You may also want to View() it.
life_frame <- is.data.frame(life_expectancy)
View("life_expectancy")
View(life_expectancy)
# Create a column `life_expectancy$change` that is the change
# in life expectancy from 1960 to 2013
life_expectancy$change <- life_expectancy$le_1960 - life_expectancy$le_2013
# Create a column `life_expectancy$change` that is the change
# in life expectancy from 1960 to 2013
life_expectancy$change <- life_expectancy$le_2013 - life_expectancy$le_1960
# Create a variable `most_improved` that is the *name* of the country
# with the largest gain in life expectancy
most_improved <- life_expectancy[life_expectancy$change == max(life_expectancy$change),1]
# Create a variable `num_small_gain` that has the *number* of countries
# whose life expectance has improved fewer than 5 years between 1960 and 2013
num_small_gain <- length(life_expectancy$change[life_expectancy$change < 5])
# Write a function `country_change()` that takes in a country's name
# as a parameter, and returns it's change in life expectancy from 1960 to 2013
country_change <- function(name){
life_expectancy[name,"change"]
}
# Using your `country_change()` function, create a variable `sweden_change`
# that is the change in life expectancy from 1960 to 2013 in Sweden
sweden_change <- country_change("Sweden")
# Write a function `country_change()` that takes in a country's name
# as a parameter, and returns it's change in life expectancy from 1960 to 2013
country_change <- function(name){
life_expectancy[life_expectancy$country == name,"change"]
}
# Using your `country_change()` function, create a variable `sweden_change`
# that is the change in life expectancy from 1960 to 2013 in Sweden
sweden_change <- country_change("Sweden")
# Define a function `lowest_life_exp_in_region()` that takes in a **region**
# as an argument, and returns the **name of the country**
# with the lowest life expectancy in 2013 (in that region)
lowest_life_exp_in_region <- function(region_input){
region_set <- life_expectancy[life_expectancy$region == region_input,]
region_set[region_set$le_2013 == min(region_set$le_2013),"country"]
}
# Using the function you just wrote, create a variable `lowest_in_south_asia`
# that is the country with the lowest life expectancy in 2013 in South Asia
lowest_in_south_asia <- lowest_life_exp_in_region("South Asia")
# Write a function `bigger_change()` that takes in two country names
# as parameters, and returns a sentence that describes which country experienced
# a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" to you function,
# It would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9),
#  whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers to one digit.
bigger_change <- function(name1, name2){
if(life_expectancy[name1,"change"] > life_expectancy[name2,"change"]){
max <- name1
max_change <- round(life_expectancy[name1,"change"],1)
min <- name2
min_change <- round(life_expectancy[name2,"change"],1)
} else if (life_expectancy[name1,"change"] < life_expectancy[name2,"change"]){
max <- name2
max_change <- round(life_expectancy[name2,"change"],1)
min <- name1
min_change <- round(life_expectancy[name1,"change"],1)
} else {
return("The two countries had an equal change in life expectancy!")
}
diff <- round(max_change - min_change,1)
paste("The country with the bigger change in life expectancy was ",max,
"(gain=",max_change,") whose life expectancy grew by ",diff,
" years more than ",min,"'s (gain=",min_change,").")
}
# Using your `bigger_change()` function, create a variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
usa_or_france <- bigger_change("United States", "France")
life_expectancy["France", "change"]
# Write a function `bigger_change()` that takes in two country names
# as parameters, and returns a sentence that describes which country experienced
# a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" to you function,
# It would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9),
#  whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers to one digit.
bigger_change <- function(name1, name2){
if(life_expectancy[life_expectancy$country == name1,"change"] > life_expectancy[life_expectancy$country == name2,"change"]){
max <- name1
max_change <- round(life_expectancy[life_expectancy$country == name1,"change"],1)
min <- name2
min_change <- round(life_expectancy[life_expectancy$country == name2,"change"],1)
} else if (life_expectancy[life_expectancy$country == name1,"change"] < life_expectancy[life_expectancy$country == name2,"change"]){
max <- name2
max_change <- round(life_expectancy[life_expectancy$country == name2,"change"],1)
min <- name1
min_change <- round(life_expectancy[life_expectancy$country == name1,"change"],1)
} else {
return("The two countries had an equal change in life expectancy!")
}
diff <- round(max_change - min_change,1)
paste("The country with the bigger change in life expectancy was ",max,
"(gain=",max_change,") whose life expectancy grew by ",diff,
" years more than ",min,"'s (gain=",min_change,").")
}
# Using your `bigger_change()` function, create a variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
usa_or_france <- bigger_change("United States", "France")
usa_or_france
# Write a function `bigger_change()` that takes in two country names
# as parameters, and returns a sentence that describes which country experienced
# a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" to you function,
# It would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9),
#  whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers to one digit.
bigger_change <- function(name1, name2){
if(life_expectancy[life_expectancy$country == name1,"change"] > life_expectancy[life_expectancy$country == name2,"change"]){
max <- name1
max_change <- round(life_expectancy[life_expectancy$country == name1,"change"],1)
min <- name2
min_change <- round(life_expectancy[life_expectancy$country == name2,"change"],1)
} else if (life_expectancy[life_expectancy$country == name1,"change"] < life_expectancy[life_expectancy$country == name2,"change"]){
max <- name2
max_change <- round(life_expectancy[life_expectancy$country == name2,"change"],1)
min <- name1
min_change <- round(life_expectancy[life_expectancy$country == name1,"change"],1)
} else {
return("The two countries had an equal change in life expectancy!")
}
diff <- round(max_change - min_change,1)
paste0("The country with the bigger change in life expectancy was ",max,
"(gain=",max_change,") whose life expectancy grew by ",diff,
" years more than ",min,"'s (gain=",min_change,").")
}
# Using your `bigger_change()` function, create a variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
usa_or_france <- bigger_change("United States", "France")
usa_or_france
source('~/School/INFO201/HW3/a3-using-data-belmontmat/assignment.r', echo=TRUE)
setwd("~/School/INFO201/HW3/a3-using-data-belmontmat")
############################## Challenge (10 points) ###########################
# Create a variable `highest_avg_change` that has the name of the region with
# the highest *average change* in life expectancy between the two time points.
# To do this, you'll need to *compute the average* change across the countries
# in each region, and then compare the averages across regions.
# Feel free to use any library of your choice, or base R functions.
install.packages("dplyr")
library("dplyr")
change_summary <- group_by(life_expectancy, region) %>%
summarise(mean = mean(change))
highest_avg_change <- max(change_summary$mean)
View(change_summary)
change_summary <- group_by(life_expectancy, region) %>%
summarise(mean = mean(change))
highest_avg_change <- change_summary[change_summary$mean == max(change_summary$mean),"region"]
View(highest_avg_change)
is.data.frame(highest_avg_change)
change_summary[change_summary$mean == max(change_summary$mean),"region"]
change_summary$mean
############################## Challenge (10 points) ###########################
# Create a variable `highest_avg_change` that has the name of the region with
# the highest *average change* in life expectancy between the two time points.
# To do this, you'll need to *compute the average* change across the countries
# in each region, and then compare the averages across regions.
# Feel free to use any library of your choice, or base R functions.
library("dplyr")
change_summary <- group_by(life_expectancy, region) %>%
summarise(mean = mean(change))
highest_avg_change <- change_summary[change_summary$mean == max(change_summary$mean),"region"]
highest_avg_change <- change_summary[change_summary$mean ==
max(change_summary$mean),1]
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
View(highest_avg_change)
change_summary <- group_by(life_expectancy, region) %>% summarise(mean = mean(change_summary$change))
highest_avg_change <- change_summary[change_summary$mean == max(change_summary$mean), "region"]
change_summary <- group_by(life_expectancy, region) %>% summarise(mean = mean(change))
highest_avg_change <- change_summary[change_summary$mean == max(change_summary$mean), "region"]
change_summary[change_summary$mean == max(change_summary$mean), "region"]
[change_summary$mean == max(change_summary$mean)
change_summary$mean == max(change_summary$mean)
View(change_summary)
change_summary <- group_by(life_expectancy, region) %>% summarise(mean = mean(change))
highest_avg_change <- change_summary[change_summary$mean == max(change_summary$mean), "mean"]
highest_avg_change <- highest_avg_change[1,1]
highest_avg_change
change_summary <- group_by(life_expectancy, region) %>% summarise(mean = mean(change))
highest_avg_change <- change_summary[change_summary$mean == max(change_summary$mean), "region"]
highest_avg_change <- highest_avg_change[1,1]
setwd("~/School/INFO201/Ch.10/ch10-dplyr/exercise-1")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View("vehicles")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manu <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manu)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
jow_many_manu <- length(unique(manu))
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
how_many_manu <- length(unique(manu))
# Filter the data set for vehicles manufactured in 1997
by_year <- vehicles[vehicles$year == 1997,]
View(by_year)
?order
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
reordered <- order(by_year)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
reordered <- by_year[order(by_year$hwy),]
View(reordered)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
by_year <- by_year[order(by_year$hwy),]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
X1997$average <- (X1997$hwy + X1997$city)/2
# Filter the data set for vehicles manufactured in 1997
X1997 <- vehicles[vehicles$year == 1997,]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
X1997 <- X1997[order(X1997$hwy),]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
X1997$average <- (X1997$hwy + X1997$city)/2
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
X1997$average <- (X1997$hwy + X1997$cty)/2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
specific <-vehicles[vehicles$drive == "2-Wheel Drive"]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
specific <-vehicles[vehicles$drive == "2-Wheel Drive",]
specific <- vehicles[vehicles$cty > 20,]
View(specific)
specific <- specific[specific$cty > 20,]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
specific <-vehicles[vehicles$drive == "2-Wheel Drive",]
specific <- specific[specific$cty > 20,]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst <- specific[specific$hwy == min(specific$hwy),"id"]
View(worst)
View(worst)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best <- function(year_choice, make_choice){
prune <- vehicles[vehicles$year == year_choice & vehicles&make == make_choice]
max(prune$hwy)
}
# What was the most efficient Honda model of 1995?
check <- best(1995,"Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best <- function(year_choice, make_choice){
prune <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice]
max(prune$hwy)
}
# What was the most efficient Honda model of 1995?
check <- best(1995,"Honda")
prune <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best <- function(year_choice, make_choice){
prune <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
max(prune$hwy)
}
# What was the most efficient Honda model of 1995?
check <- best(1995,"Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best <- function(year_choice, make_choice){
prune <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
prune[prune$hwy == max(prune$hwy),"model"]
}
# What was the most efficient Honda model of 1995?
check <- best(1995,"Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best <- function(year_choice, make_choice){
prune <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
prune[[prune$hwy == max(prune$hwy),"model"]]
}
# What was the most efficient Honda model of 1995?
check <- best(1995,"Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best <- function(year_choice, make_choice){
prune <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
prune[prune$hwy == max(prune$hwy),"model"]
}
# What was the most efficient Honda model of 1995?
check <- best(1995,"Honda")
is.data.frame(check)
salaries[which(salaries$change == max(salaries$change)),"employees"]
source('~/School/INFO201/Ch.9/ch9-data-frames/exercise-2/exercise.R', echo=TRUE)
salaries[salaries$change == max(salaries$change),1]
# What was the "name" of the employee who received the highest raise?
highest_raise <- salaries[which(salaries$change == max(salaries$change)),"employees"]
# What was the "name" of the employee who received the highest raise?
highest_raise <- #salaries[which(salaries$change == max(salaries$change)),"employees"]
salaries[salaries$change == max(salaries$change),1]
prune <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, drop == TRUE]
prune[prune$hwy == max(prune$hwy),"model"]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best <- function(year_choice, make_choice){
prune <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
prune[prune$hwy == max(prune$hwy),"model"]
}
# What was the most efficient Honda model of 1995?
check <- best(1995,"Honda")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manu <- filter(vehicles, make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manu <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(manu)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
manu_count <- length(distinct(manu))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
manu_count <- distinct(manu)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
manu_count <- nrow(distinct(manu))
# Filter the data set for vehicles manufactured in 1997
X1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
X1997 <- arrange(X1997, hwy)
source('~/School/INFO201/Ch.10/ch10-dplyr/exercise-2/exercise.R', echo=TRUE)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
X1997 <- mutate(X1997, average = (hwy+cty)/2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
specific <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
